# Use uma imagem base do Node.js
FROM node:20-alpine

# Defina o diretório de trabalho no contêiner
WORKDIR /app

# Copie o package.json e o package-lock.json
COPY package*.json ./

# Instale as dependências
RUN npm install

# Copie o restante do código da aplicação
COPY . .

# Construa a aplicação para produção
RUN npm run build

# Exponha a porta que a aplicação usará
EXPOSE 3000

# Comando para rodar a aplicação
CMD ["npm", "start"]



# name: Build, Push Docker Image and Deploy

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v2

#     - name: Log in to GHCR
#       uses: docker/login-action@v2
#       with:
#         registry: ghcr.io
#         username: ${{ secrets.GHCR_USERNAME }}
#         password: ${{ secrets.GHCR_TOKEN }}

#     - name: Build and push Docker image
#       uses: docker/build-push-action@v4
#       with:
#         context: .
#         push: true
#         tags: ghcr.io/emersonkenji/next-docker:latest
#         platforms: linux/amd64,linux/arm64

#     - name: Deploy to server
#       uses: appleboy/ssh-action@v0.1.6
#       with:
#         host: ${{ secrets.SERVER_HOST }}
#         username: ${{ secrets.SERVER_USER }}
#         key: ${{ secrets.SERVER_SSH_KEY }}
#         script: |
#           # Puxar a imagem mais recente
#           docker pull ghcr.io/emersonkenji/next-docker:latest

#           # Parar e remover o container antigo
#           docker stop my-next-docker-app || true
#           docker rm my-next-docker-app || true

#           # Iniciar um novo container com a imagem atualizada
#           docker run -d --name my-next-docker-app -p 80:3000 ghcr.io/emersonkenji/next-docker:latest
